{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","prevProps","prevState","console","log","counter","value","this","props","className","getBadgeClasses","formatCount","onClick","onIncrement","onDecrement","disabled","onDelete","id","classes","Component","Counters","onReset","counters","map","key","NavBar","totalCounters","href","App","state","handleDelete","counterId","filter","setState","handleReset","handleIncrement","index","indexOf","handleDecrement","Fragment","c","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPA0DeA,G,uLAvDMC,EAAWC,GAC5BC,QAAQC,IAAI,oBAAqB,CAAEH,YAAWC,cAC1CD,EAAUI,QAAQC,MAAUC,KAAKC,MAAMH,QAAQC,Q,6CAMnDH,QAAQC,IAAI,uB,+BAGJ,IAAD,OAEP,OADAD,QAAQC,IAAI,sBAEV,yBAAKK,UAAU,OACb,yBAAKA,UAAU,SACb,0BAAMA,UAAWF,KAAKG,mBAAoBH,KAAKI,gBAEjD,yBAAKF,UAAU,OACb,4BACEG,QAAS,kBAAM,EAAKJ,MAAMK,YAAY,EAAKL,MAAMH,UACjDI,UAAU,4BAFZ,KAMA,4BACEG,QAAS,kBAAM,EAAKJ,MAAMM,YAAY,EAAKN,MAAMH,UACjDI,UAAU,+BACVM,SAAuC,IAA7BR,KAAKC,MAAMH,QAAQC,MAAc,WAAa,IAH1D,KAOA,4BACEM,QAAS,kBAAM,EAAKJ,MAAMQ,SAAS,EAAKR,MAAMH,QAAQY,KACtDR,UAAU,yBAFZ,c,wCAYN,IAAIS,EAAU,mBAEd,OADAA,GAAwC,IAA7BX,KAAKC,MAAMH,QAAQC,MAAc,UAAY,Y,oCAI3C,IACLA,EAAUC,KAAKC,MAAMH,QAArBC,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GApDZa,cC4BPC,E,uKAzBH,IAAD,OAGP,OAFAjB,QAAQC,IAAI,uBACZD,QAAQC,IAAI,gBAAiBG,KAAKC,OAEhC,6BACE,4BACEI,QAASL,KAAKC,MAAMa,QACpBZ,UAAU,8BAFZ,SAMCF,KAAKC,MAAMc,SAASC,KAAI,SAAClB,GAAD,OACvB,kBAAC,EAAD,CACEmB,IAAKnB,EAAQY,GACbZ,QAASA,EACTW,SAAU,EAAKR,MAAMQ,SACrBH,YAAa,EAAKL,MAAMK,YACxBC,YAAa,EAAKN,MAAMM,sB,GAlBbK,aCaRM,EAdA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEhB,OADAvB,QAAQC,IAAI,qBAEV,yBAAKK,UAAU,gCACb,uBAAGA,UAAU,eAAekB,KAAK,KAAjC,SACS,IACP,0BAAMlB,UAAU,oCACbiB,MCyEIE,E,kDAlEb,aAAe,IAAD,8BACZ,gBAVFC,MAAQ,CACNP,SAAU,CACR,CAAEL,GAAI,EAAGX,MAAO,GAChB,CAAEW,GAAI,EAAGX,MAAO,GAChB,CAAEW,GAAI,EAAGX,MAAO,GAChB,CAAEW,GAAI,EAAGX,MAAO,KAIN,EAUdwB,aAAe,SAAAC,GACb,IAAMT,EAAW,EAAKO,MAAMP,SAASU,QACnC,SAAA3B,GAAO,OAAIA,EAAQY,KAAOc,KAE5B,EAAKE,SAAS,CAAEX,cAdJ,EAiBdY,YAAc,WACZ,IAAMZ,EAAW,EAAKO,MAAMP,SAASC,KAAI,SAAAlB,GAEvC,OADAA,EAAQC,MAAQ,EACTD,KAET,EAAK4B,SAAS,CAAEX,cAtBJ,EAyBda,gBAAkB,SAAA9B,GAChBF,QAAQC,IAAI,kBAAmBC,GAC/B,IAAMiB,EAAQ,YAAO,EAAKO,MAAMP,UAC1Bc,EAAQd,EAASe,QAAQhC,GAC/BiB,EAASc,GAAT,eAAuB/B,GACvBiB,EAASc,GAAO9B,QAChBH,QAAQC,IAAI,sBAAuB,EAAKyB,MAAMP,SAASc,IACvD,EAAKH,SAAS,CAAEX,cAhCJ,EAmCdgB,gBAAkB,SAAAjC,GAChBF,QAAQC,IAAI,kBAAmBC,GAC/B,IAAMiB,EAAQ,YAAO,EAAKO,MAAMP,UAC1Bc,EAAQd,EAASe,QAAQhC,GAC/BiB,EAASc,GAAT,eAAuB/B,GACvBiB,EAASc,GAAO9B,QAChBH,QAAQC,IAAI,sBAAuB,EAAKyB,MAAMP,SAASc,IACvD,EAAKH,SAAS,CAAEX,cAxChBnB,QAAQC,IAAI,qBAFA,E,gEAOZD,QAAQC,IAAI,mB,+BAwCZ,OADAD,QAAQC,IAAI,kBAEV,kBAAC,IAAMmC,SAAP,KACE,kBAAC,EAAD,CACEb,cAAenB,KAAKsB,MAAMP,SAASU,QAAO,SAAAQ,GAAC,OAAIA,EAAElC,MAAQ,KAAGmC,SAE9D,0BAAMhC,UAAU,aACd,kBAAC,EAAD,CACEa,SAAUf,KAAKsB,MAAMP,SACrBD,QAASd,KAAK2B,YACdrB,YAAaN,KAAK4B,gBAClBrB,YAAaP,KAAK+B,gBAClBtB,SAAUT,KAAKuB,qB,GApETX,aCKEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.24763653.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"Counter - updated\", { prevProps, prevState });\n    if (prevProps.counter.value !== this.props.counter.value) {\n      // Ajax call and get new data\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"Counter - Unmount\");\n  }\n\n  render() {\n    console.log(\"Counter - rendered\");\n    return (\n      <div className=\"row\">\n        <div className=\"col-1\">\n          <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        </div>\n        <div className=\"col\">\n          <button\n            onClick={() => this.props.onIncrement(this.props.counter)}\n            className=\"btn btn-secondary btn-sm\"\n          >\n            +\n          </button>\n          <button\n            onClick={() => this.props.onDecrement(this.props.counter)}\n            className=\"btn btn-secondary btn-sm m-2\"\n            disabled={this.props.counter.value === 0 ? \"disabled\" : \"\"}\n          >\n            -\n          </button>\n          <button\n            onClick={() => this.props.onDelete(this.props.counter.id)}\n            className=\"btn btn-danger btn-sm\"\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.counter; // Object Destructuring\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\n\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  render() {\n    console.log(\"Counters - rendered\");\n    console.log(\"counter props\", this.props);\n    return (\n      <div>\n        <button\n          onClick={this.props.onReset}\n          className=\"btn btn-primary btn-sm m-2\"\n        >\n          Reset\n        </button>\n        {this.props.counters.map((counter) => (\n          <Counter\n            key={counter.id}\n            counter={counter}\n            onDelete={this.props.onDelete}\n            onIncrement={this.props.onIncrement}\n            onDecrement={this.props.onDecrement}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React from \"react\";\n\n// Stateless Functional Component\nconst NavBar = ({ totalCounters }) => {\n  console.log(\"NavBar - rendered\");\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Navbar{\" \"}\n        <span className=\"badge badge-pill badge-secondary\">\n          {totalCounters}\n        </span>\n      </a>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import \"./App.css\";\n\nimport React, { Component } from \"react\";\n\nimport Counters from \"./components/counters\";\nimport NavBar from \"./components/navbar\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n\n  constructor() {\n    super();\n    console.log(\"App - constructor\");\n  }\n\n  componentDidMount() {\n    // Ajax calls\n    console.log(\"App - mounted\");\n  }\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(\n      counter => counter.id !== counterId\n    );\n    this.setState({ counters }); // = this.setState({ counters: counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(counter => {\n      counter.value = 0;\n      return counter;\n    });\n    this.setState({ counters }); // = this.setState({ counters: counters });\n  };\n\n  handleIncrement = counter => {\n    console.log(\"handleIncrement\", counter);\n    const counters = [...this.state.counters]; // cloning an array\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter }; // cloning an object\n    counters[index].value++;\n    console.log(\"this.state.counters\", this.state.counters[index]);\n    this.setState({ counters });\n  };\n\n  handleDecrement = counter => {\n    console.log(\"handleDecrement\", counter);\n    const counters = [...this.state.counters]; // cloning an array\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter }; // cloning an object\n    counters[index].value--;\n    console.log(\"this.state.counters\", this.state.counters[index]);\n    this.setState({ counters });\n  };\n\n  render() {\n    console.log(\"App - rendered\");\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDecrement={this.handleDecrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}